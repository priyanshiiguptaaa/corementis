{"ast":null,"code":"/**\n * Service for communicating with the engagement analyzer API\n */\n\n// Use the fixed engagement API\nconst API_BASE_URL = 'http://localhost:5000/api';\nclass EngagementService {\n  /**\n   * Check if the engagement analyzer API is available\n   * @returns {Promise} - API status response\n   */\n  static async checkStatus() {\n    try {\n      // Try to fetch with a longer timeout\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout\n\n      const response = await fetch(`${API_BASE_URL}/status`, {\n        headers: {\n          'Cache-Control': 'no-cache',\n          'Pragma': 'no-cache'\n        }\n      });\n      const data = await response.json();\n      console.log('Status check result:', data);\n      return data;\n    } catch (error) {\n      console.error('Error checking engagement analyzer status:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  }\n\n  /**\n   * Initialize the engagement analyzer with a specific context\n   * @param {string} context - The classroom context (lecture, interactive, exam)\n   * @returns {Promise} - API response\n   */\n  static async initialize(context = 'lecture') {\n    console.log(`Initializing engagement analyzer with context: ${context}`);\n    try {\n      // First check if the API is available\n      const statusCheck = await this.checkStatus();\n      if (!statusCheck.success) {\n        console.warn('API status check failed, but continuing with initialization');\n      }\n      const response = await fetch(`${API_BASE_URL}/initialize`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Cache-Control': 'no-cache',\n          'Pragma': 'no-cache'\n        },\n        body: JSON.stringify({\n          context\n        })\n      });\n      const result = await response.json();\n      console.log('Initialize response:', result);\n      return result;\n    } catch (error) {\n      console.error('Error initializing engagement analyzer:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  }\n\n  /**\n   * Analyze a video frame for engagement\n   * @param {string} imageData - Base64 encoded image data\n   * @returns {Promise} - API response with engagement metrics\n   */\n  static async analyzeFrame(imageData) {\n    console.log('Analyzing frame with API...');\n    try {\n      console.log(`Sending request to ${API_BASE_URL}/analyze`);\n      console.log('Image data length:', imageData.length);\n      const response = await fetch(`${API_BASE_URL}/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Cache-Control': 'no-cache, no-store, must-revalidate',\n          'Pragma': 'no-cache',\n          'Expires': '0'\n        },\n        body: JSON.stringify({\n          image: imageData\n        }),\n        mode: 'cors',\n        credentials: 'omit'\n      });\n      console.log('Response status:', response.status);\n      console.log('Response headers:', [...response.headers.entries()]);\n      if (!response.ok) {\n        console.error('API response not OK:', response.status, response.statusText);\n        return {\n          success: false,\n          message: `API error: ${response.status} ${response.statusText}`\n        };\n      }\n      const result = await response.json();\n      console.log('Analysis result from API:', result);\n\n      // Verify history data\n      if (result.success && result.history) {\n        console.log('History data received from API:', result.history);\n      } else if (result.success) {\n        console.warn('No history data in successful API response');\n      }\n      return result;\n    } catch (error) {\n      console.error('Error analyzing frame:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  }\n\n  /**\n   * Check if the engagement analyzer is initialized\n   * @returns {Promise} - API response\n   */\n  static async getStatus() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/status`);\n      return await response.json();\n    } catch (error) {\n      console.error('Error checking engagement analyzer status:', error);\n      return {\n        initialized: false\n      };\n    }\n  }\n}\nexport default EngagementService;","map":{"version":3,"names":["API_BASE_URL","EngagementService","checkStatus","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","headers","data","json","console","log","error","success","message","initialize","context","statusCheck","warn","method","body","JSON","stringify","result","analyzeFrame","imageData","length","image","mode","credentials","status","entries","ok","statusText","history","getStatus","initialized"],"sources":["C:/Users/rkgup/OneDrive/Desktop/corementis/frontend/src/services/EngagementService.js"],"sourcesContent":["/**\n * Service for communicating with the engagement analyzer API\n */\n\n// Use the fixed engagement API\nconst API_BASE_URL = 'http://localhost:5000/api';\n\nclass EngagementService {\n  /**\n   * Check if the engagement analyzer API is available\n   * @returns {Promise} - API status response\n   */\n  static async checkStatus() {\n    try {\n      // Try to fetch with a longer timeout\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout\n      \n      const response = await fetch(`${API_BASE_URL}/status`, {\n        headers: {\n          'Cache-Control': 'no-cache',\n          'Pragma': 'no-cache'\n        }\n      });\n      const data = await response.json();\n      console.log('Status check result:', data);\n      return data;\n    } catch (error) {\n      console.error('Error checking engagement analyzer status:', error);\n      return { success: false, message: error.message };\n    }\n  }\n\n  /**\n   * Initialize the engagement analyzer with a specific context\n   * @param {string} context - The classroom context (lecture, interactive, exam)\n   * @returns {Promise} - API response\n   */\n  static async initialize(context = 'lecture') {\n    console.log(`Initializing engagement analyzer with context: ${context}`);\n    try {\n      // First check if the API is available\n      const statusCheck = await this.checkStatus();\n      if (!statusCheck.success) {\n        console.warn('API status check failed, but continuing with initialization');\n      }\n      \n      const response = await fetch(`${API_BASE_URL}/initialize`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Cache-Control': 'no-cache',\n          'Pragma': 'no-cache'\n        },\n        body: JSON.stringify({ context }),\n      });\n      \n      const result = await response.json();\n      console.log('Initialize response:', result);\n      return result;\n    } catch (error) {\n      console.error('Error initializing engagement analyzer:', error);\n      return { success: false, message: error.message };\n    }\n  }\n\n  /**\n   * Analyze a video frame for engagement\n   * @param {string} imageData - Base64 encoded image data\n   * @returns {Promise} - API response with engagement metrics\n   */\n  static async analyzeFrame(imageData) {\n    console.log('Analyzing frame with API...');\n    try {\n      console.log(`Sending request to ${API_BASE_URL}/analyze`);\n      console.log('Image data length:', imageData.length);\n      \n      const response = await fetch(`${API_BASE_URL}/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Cache-Control': 'no-cache, no-store, must-revalidate',\n          'Pragma': 'no-cache',\n          'Expires': '0'\n        },\n        body: JSON.stringify({ image: imageData }),\n        mode: 'cors',\n        credentials: 'omit'\n      });\n      \n      console.log('Response status:', response.status);\n      console.log('Response headers:', [...response.headers.entries()]);\n      \n      if (!response.ok) {\n        console.error('API response not OK:', response.status, response.statusText);\n        return { success: false, message: `API error: ${response.status} ${response.statusText}` };\n      }\n      \n      const result = await response.json();\n      console.log('Analysis result from API:', result);\n      \n      // Verify history data\n      if (result.success && result.history) {\n        console.log('History data received from API:', result.history);\n      } else if (result.success) {\n        console.warn('No history data in successful API response');\n      }\n      \n      return result;\n    } catch (error) {\n      console.error('Error analyzing frame:', error);\n      return { success: false, message: error.message };\n    }\n  }\n\n  /**\n   * Check if the engagement analyzer is initialized\n   * @returns {Promise} - API response\n   */\n  static async getStatus() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/status`);\n      return await response.json();\n    } catch (error) {\n      console.error('Error checking engagement analyzer status:', error);\n      return { initialized: false };\n    }\n  }\n}\n\nexport default EngagementService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}