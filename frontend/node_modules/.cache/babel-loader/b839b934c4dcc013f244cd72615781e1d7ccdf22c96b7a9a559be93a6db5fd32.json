{"ast":null,"code":"/**\n * Service for communicating with the engagement analyzer API\n */\n\nconst API_BASE_URL = 'http://localhost:5000/api';\nclass EngagementService {\n  /**\n   * Initialize the engagement analyzer with a specific context\n   * @param {string} context - The classroom context (lecture, interactive, exam)\n   * @returns {Promise} - API response\n   */\n  static async initialize(context = 'lecture') {\n    try {\n      const response = await fetch(`${API_BASE_URL}/initialize`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          context\n        })\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('Error initializing engagement analyzer:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  }\n\n  /**\n   * Analyze a video frame for engagement\n   * @param {string} imageData - Base64 encoded image data\n   * @returns {Promise} - API response with engagement metrics\n   */\n  static async analyzeFrame(imageData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          image: imageData\n        })\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('Error analyzing frame:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  }\n\n  /**\n   * Check if the engagement analyzer is initialized\n   * @returns {Promise} - API response\n   */\n  static async getStatus() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/status`);\n      return await response.json();\n    } catch (error) {\n      console.error('Error checking engagement analyzer status:', error);\n      return {\n        initialized: false\n      };\n    }\n  }\n}\nexport default EngagementService;","map":{"version":3,"names":["API_BASE_URL","EngagementService","initialize","context","response","fetch","method","headers","body","JSON","stringify","json","error","console","success","message","analyzeFrame","imageData","image","getStatus","initialized"],"sources":["C:/Users/rkgup/OneDrive/Desktop/corementis/frontend/src/services/EngagementService.js"],"sourcesContent":["/**\n * Service for communicating with the engagement analyzer API\n */\n\nconst API_BASE_URL = 'http://localhost:5000/api';\n\nclass EngagementService {\n  /**\n   * Initialize the engagement analyzer with a specific context\n   * @param {string} context - The classroom context (lecture, interactive, exam)\n   * @returns {Promise} - API response\n   */\n  static async initialize(context = 'lecture') {\n    try {\n      const response = await fetch(`${API_BASE_URL}/initialize`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ context }),\n      });\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Error initializing engagement analyzer:', error);\n      return { success: false, message: error.message };\n    }\n  }\n\n  /**\n   * Analyze a video frame for engagement\n   * @param {string} imageData - Base64 encoded image data\n   * @returns {Promise} - API response with engagement metrics\n   */\n  static async analyzeFrame(imageData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ image: imageData }),\n      });\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Error analyzing frame:', error);\n      return { success: false, message: error.message };\n    }\n  }\n\n  /**\n   * Check if the engagement analyzer is initialized\n   * @returns {Promise} - API response\n   */\n  static async getStatus() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/status`);\n      return await response.json();\n    } catch (error) {\n      console.error('Error checking engagement analyzer status:', error);\n      return { initialized: false };\n    }\n  }\n}\n\nexport default EngagementService;\n"],"mappings":"AAAA;AACA;AACA;;AAEA,MAAMA,YAAY,GAAG,2BAA2B;AAEhD,MAAMC,iBAAiB,CAAC;EACtB;AACF;AACA;AACA;AACA;EACE,aAAaC,UAAUA,CAACC,OAAO,GAAG,SAAS,EAAE;IAC3C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,aAAa,EAAE;QACzDM,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEP;QAAQ,CAAC;MAClC,CAAC,CAAC;MAEF,OAAO,MAAMC,QAAQ,CAACO,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MAC/D,OAAO;QAAEE,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAEH,KAAK,CAACG;MAAQ,CAAC;IACnD;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,aAAaC,YAAYA,CAACC,SAAS,EAAE;IACnC,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,UAAU,EAAE;QACtDM,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEQ,KAAK,EAAED;QAAU,CAAC;MAC3C,CAAC,CAAC;MAEF,OAAO,MAAMb,QAAQ,CAACO,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,OAAO;QAAEE,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAEH,KAAK,CAACG;MAAQ,CAAC;IACnD;EACF;;EAEA;AACF;AACA;AACA;EACE,aAAaI,SAASA,CAAA,EAAG;IACvB,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,SAAS,CAAC;MACtD,OAAO,MAAMI,QAAQ,CAACO,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;MAClE,OAAO;QAAEQ,WAAW,EAAE;MAAM,CAAC;IAC/B;EACF;AACF;AAEA,eAAenB,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}