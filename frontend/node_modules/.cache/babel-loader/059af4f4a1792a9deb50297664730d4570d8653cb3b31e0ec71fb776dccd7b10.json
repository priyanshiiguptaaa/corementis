{"ast":null,"code":"/**\n * Service for communicating with the engagement analyzer API\n */\n\n// Use the fixed engagement API\nconst API_BASE_URL = 'http://localhost:5000/api';\nclass EngagementService {\n  /**\n   * Check if the engagement analyzer API is available\n   * @returns {Promise} - API status response\n   */\n  static async checkStatus() {\n    try {\n      // Try to fetch with a longer timeout\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout\n\n      const response = await fetch(`${API_BASE_URL}/status`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: controller.signal\n      }).catch(() => null);\n      clearTimeout(timeoutId);\n      if (response && response.ok) {\n        return {\n          success: true\n        };\n      } else {\n        console.log('Backend API is not available, using simulated data');\n        return {\n          success: false,\n          message: 'API service unavailable'\n        };\n      }\n    } catch (error) {\n      console.error('Error checking engagement analyzer status:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  }\n\n  /**\n   * Initialize the engagement analyzer with a specific context\n   * @param {string} context - The classroom context (lecture, interactive, exam)\n   * @returns {Promise} - API response\n   */\n  static async initialize(context = 'lecture') {\n    console.log('Initializing engagement analyzer with context:', context);\n    try {\n      const response = await fetch(`${API_BASE_URL}/initialize`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          context\n        })\n      });\n      const result = await response.json();\n      console.log('Initialize response:', result);\n      return result;\n    } catch (error) {\n      console.error('Error initializing engagement analyzer:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  }\n\n  /**\n   * Analyze a video frame for engagement\n   * @param {string} imageData - Base64 encoded image data\n   * @returns {Promise} - API response with engagement metrics\n   */\n  static async analyzeFrame(imageData) {\n    console.log('Analyzing frame...');\n    try {\n      const response = await fetch(`${API_BASE_URL}/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          image: imageData\n        })\n      });\n      const result = await response.json();\n      console.log('Analysis result:', result);\n      return result;\n    } catch (error) {\n      console.error('Error analyzing frame:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  }\n\n  /**\n   * Check if the engagement analyzer is initialized\n   * @returns {Promise} - API response\n   */\n  static async getStatus() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/status`);\n      return await response.json();\n    } catch (error) {\n      console.error('Error checking engagement analyzer status:', error);\n      return {\n        initialized: false\n      };\n    }\n  }\n}\nexport default EngagementService;","map":{"version":3,"names":["API_BASE_URL","EngagementService","checkStatus","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","method","headers","signal","catch","clearTimeout","ok","success","console","log","message","error","initialize","context","body","JSON","stringify","result","json","analyzeFrame","imageData","image","getStatus","initialized"],"sources":["C:/Users/rkgup/OneDrive/Desktop/corementis/frontend/src/services/EngagementService.js"],"sourcesContent":["/**\n * Service for communicating with the engagement analyzer API\n */\n\n// Use the fixed engagement API\nconst API_BASE_URL = 'http://localhost:5000/api';\n\nclass EngagementService {\n  /**\n   * Check if the engagement analyzer API is available\n   * @returns {Promise} - API status response\n   */\n  static async checkStatus() {\n    try {\n      // Try to fetch with a longer timeout\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout\n      \n      const response = await fetch(`${API_BASE_URL}/status`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        signal: controller.signal\n      }).catch(() => null);\n      \n      clearTimeout(timeoutId);\n      \n      if (response && response.ok) {\n        return { success: true };\n      } else {\n        console.log('Backend API is not available, using simulated data');\n        return { success: false, message: 'API service unavailable' };\n      }\n    } catch (error) {\n      console.error('Error checking engagement analyzer status:', error);\n      return { success: false, message: error.message };\n    }\n  }\n\n  /**\n   * Initialize the engagement analyzer with a specific context\n   * @param {string} context - The classroom context (lecture, interactive, exam)\n   * @returns {Promise} - API response\n   */\n  static async initialize(context = 'lecture') {\n    console.log('Initializing engagement analyzer with context:', context);\n    try {\n      const response = await fetch(`${API_BASE_URL}/initialize`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ context }),\n      });\n      \n      const result = await response.json();\n      console.log('Initialize response:', result);\n      return result;\n    } catch (error) {\n      console.error('Error initializing engagement analyzer:', error);\n      return { success: false, message: error.message };\n    }\n  }\n\n  /**\n   * Analyze a video frame for engagement\n   * @param {string} imageData - Base64 encoded image data\n   * @returns {Promise} - API response with engagement metrics\n   */\n  static async analyzeFrame(imageData) {\n    console.log('Analyzing frame...');\n    try {\n      const response = await fetch(`${API_BASE_URL}/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ image: imageData }),\n      });\n      \n      const result = await response.json();\n      console.log('Analysis result:', result);\n      return result;\n    } catch (error) {\n      console.error('Error analyzing frame:', error);\n      return { success: false, message: error.message };\n    }\n  }\n\n  /**\n   * Check if the engagement analyzer is initialized\n   * @returns {Promise} - API response\n   */\n  static async getStatus() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/status`);\n      return await response.json();\n    } catch (error) {\n      console.error('Error checking engagement analyzer status:', error);\n      return { initialized: false };\n    }\n  }\n}\n\nexport default EngagementService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}